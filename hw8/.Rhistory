if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
}
print(cow_patty_bingo_lazy_sims(seed=1))
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )))
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
)
}
print(cow_patty_bingo_lazy_sims(seed=1))
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
)
}
print(cow_patty_bingo_lazy_sims(seed=1))
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
out = out
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2,
out = out
)
}
print(cow_patty_bingo_lazy_sims(seed=1))
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
)
}
print(cow_patty_bingo_lazy_sims(seed=1))
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- cow_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1),
scene2 = sum(scene_2))
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- cow_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1),
scene2 = sum(scene_2))
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- cow_trials |>
unnest(cow_trial)
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- cow_trials |>
unnest(cow_trial)
sim_trials_results
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = FALSE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
)
}
print(cow_patty_bingo_lazy_sims(seed=1))
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- sim_trials |>
unnest(cow_trial)
sim_trials_results
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- sim_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1),
scene2 = sum(scene_2))
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- sim_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1),
scene2 = sum(scene_2))
sim_trials_results
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- sim_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1)/1000,
scene2 = sum(scene_2)/1000)
sim_trials_results
cow_patty_bingo_lazy_sims <- function(seed){
set.seed(seed)
cow_grid <- expand_grid(x = 1:10,
y = 1:10) |>
mutate(square_id = 1:n(),
.before = 1)|>
mutate(prob = exp(-0.5 * sqrt(x^2 + y^2)))
winners <- cow_grid |>
pull(square_id) |>
sample(size = 2,
replace = TRUE,
prob = cow_grid |> pull(prob))
winner1 = winners[1]
winner2 = winners[2]
x1 = ((winner1+1) %/% 10) + 1
y1 = winner1 %% 10
if (y1 == 0){
y1 = 10
}
x2 = ((winner2+1) %/% 10) + 1
y2 = winner2 %% 10
if (y2 == 0){
y2 = 10
}
out <- c(winner1,winner2,x1,y1,x2,y2)
scene1 = if_else(x1 %% 2 != 0 & y1 %% 2 != 0 & x2 %% 2 != 0 & y2 %% 2 != 0, TRUE, FALSE)
scene2 = if_else((( x1-x2 == 1 | x2-x1==1 ) & y2-y1 == 0) |
(( y1-y2 == 1 | y2-y1==1 ) & x2-x1 == 0) |
(( x1-x2 == 1 | x2-x1==1 ) & ( y1-y2 == 1 | y2-y1==1 )),
TRUE, FALSE)
result <- tibble(
scene_1 = scene1,
scene_2 = scene2
)
}
print(cow_patty_bingo_lazy_sims(seed=1)) # checking
sim_trials <- tibble(trial_num = 1:1000) |>
rowwise()|>
mutate(cow_trial = list(cow_patty_bingo_lazy_sims(seed = trial_num)))
sim_trials_results <- sim_trials |>
unnest(cow_trial) |>
summarize(scene1 = sum(scene_1)/1000,
scene2 = sum(scene_2)/1000)
sim_trials_results
library(palmerpenguins)
penguins |>
glimpse()
penguins_dat <- penguins |>
drop_na(flipper_length_mm) |>
filter(species != "Gentoo")
summary_dat <- penguins_dat |>
summarize(mean_flip = mean(flipper_length_mm),
n_penguins = n(),
.by = species)
Tobs <- summary_dat$mean_flip[1] - summary_dat$mean_flip[2]
Tobs
set.seed(7)
labels_permuted <- sample(penguins_dat$species, length(penguins_dat$species))
shuffle_penguins <- function(seed,
penguins_dat){
set.seed(seed)
penguins_dat |>
mutate(labels_permuted = sample(penguins_dat$species, length(penguins_dat$species)))
}
permutation_penguins <- tibble(simulation_num = 1:500) |>
rowwise() |>
mutate(shuffled_df = list(shuffle_penguins(simulation_num,
penguins_dat)))
permutation_penguins <- permutation_penguins |>
mutate(mean_flip_Adelie = shuffled_df |>
filter(labels_permuted == "Adelie") |>
pull(flipper_length_mm) |>
mean()) |>
mutate(mean_flip_Chinstrap = shuffled_df |>
filter(labels_permuted == "Chinstrap") |>
pull(flipper_length_mm) |>
mean()) |>
mutate(mean_flip_diff = mean_flip_Adelie - mean_flip_Chinstrap)
permutation_penguins |>
mutate(type = "simulated") |>
ggplot(aes(x = mean_flip_diff,
fill = type,
color = type)) +
geom_histogram() +
geom_point(aes(fill = "Observed",
color = "Observed",
x = Tobs,
y = 0),
shape = 21,
size = 3)
values <- permutation_penguins |>
pull(mean_flip_diff) |>
abs()
mean(abs(Tobs) < values)
dat <- penguins |>
drop_na(flipper_length_mm)
penguins_adelie <- dat |>
filter(species == "Adelie")
penguins_chinstrap <- dat |>
filter(species == "Chinstrap")
ks.test(penguins_adelie |> pull(flipper_length_mm),
penguins_chinstrap |> pull(flipper_length_mm))
X <- rgamma(1000, shape = 2, rate = 2)
f <- function(x){
res <- x^2 * log(x)^2
return(res)
}
g <- function(x){
res <- x^2 + log(x)^2
return(res)
}
exp_f_X <- X |>
f() |>
mean()
exp_g_X <- X |>
g() |>
mean()
exp <- tibble(
E_fX = exp_f_X,
E_fg = exp_g_X
)
exp
X <- rpois(1000, lambda = 0.01)
cost <- function(x) {
ifelse(ifelse(x < 2, 0,
(1000 * x * (x - 1) * exp(-x))))
}
espected_cost <- X |>
cost() |>
mean()
X <- rpois(1000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0,
(1000 * x * (x - 1) * exp(-x))))
X <- rpois(1000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0,
(1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost() |>
mean()
expected_cost
X <- rpois(1000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost() |>
expected_cost
X <- rpois(1000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost()
expected_cost
X <- rpois(10000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost()
X
X <- rpois(10000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost()
expected_cost
X <- rpois(10000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost() |>
mean()
expected_cost
X <- rpois(1000000000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost() |>
mean()
X <- rpois(100000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
expected_cost <- X |>
cost() |>
mean()
expected_cost
library(coda)
install.packages("coda")
library(coda)
X <- rpois(100000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
cost_x <- cost(X)
expected_cost <- mean(cost_x)
ci <- c(mean(cost_x) - 2* sd(cost_x)/sqrt(effectiveSize(cost_x)),
mean(cost_x) + 2* sd(cost_x)/sqrt(effectiveSize(cost_x)))
print("expected cost:", expected_cost)
library(coda)
X <- rpois(100000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
cost_x <- cost(X)
expected_cost <- mean(cost_x)
ci <- c(mean(cost_x) - 2* sd(cost_x)/sqrt(effectiveSize(cost_x)),
mean(cost_x) + 2* sd(cost_x)/sqrt(effectiveSize(cost_x)))
cat("expected cost:", expected_cost)
cat("confidence interval:", ci)
library(coda)
X <- rpois(100000, lambda = 0.01)
cost <- function(x) {
ifelse(x < 2, 0, (1000 * x * (x - 1) * exp(-x)))
}
cost_x <- cost(X)
expected_cost <- mean(cost_x)
ci <- c(mean(cost_x) - 2* sd(cost_x)/sqrt(effectiveSize(cost_x)),
mean(cost_x) + 2* sd(cost_x)/sqrt(effectiveSize(cost_x)))
cat("expected cost:", expected_cost, "\n")
cat("confidence interval:", ci)
set.seed(123)
n <- 10000
X <- runif(n)
Y <- -log(X)
ks_result <- ks.test(Y, "pexp", rate = 1)
ks_result
